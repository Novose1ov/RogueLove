import os
import random


WALL_CHAR = "█"


labirint = ['████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████',
            '██          ██  ██          ██                  ██                              ██  ██  ██  ██  ██      ██  ██  ██          ██                ██',
            '██          ██  ██  ██████  ██  ██████████  ██  ██  ██████████████████████████  ██  ██              ██████          ██  ██      ████  ██████  ██',
            '██          ██  ██  ██  ██  ██  ██          ██  ██  ██                      ██      ██  ██████████          ██████████  ████████████  ██  ██  ██',
            '██          ██  ██  ██  ██  ██  ██████████████      ██  ████████████  ████  ██  ██████    ██  ████████████████  ██  ██████  ██        ██  ██  ██',
            '██          ██  ██      ██  ██                  ██  ██  ██              ██  ██  ██      ████                    ██          ██  ████      ██  ██',
            '██  ██████████  ██  ██  ██  ████  ██  ██  ████████  ██  ██  ██████████  ██  ██  ██  ██████    ████████████████  ██  ██████      ██    ██████  ██',
            '██  ██  ██  ██  ██  ██  ██  ██    ██  ██        ██  ██  ██  ██  ██  ██  ██  ██  ██      ████              ████  ██████  ██████  ██  ████  ██  ██',
            '██      ██      ██  ██  ██  ████████  ████████████  ██  ██          ██  ██  ██████  ██  ████  ██  ██  ██    ██              ██  ██  ██        ██',
            '██  ██  ██████  ██  ██  ██                          ██  ██████████████  ██    ██    ██    ██  ██  ██  ██  ██████████████  ████  ██  ████████  ██',
            '██  ██          ██  ██  ██  ████  ████████████████████        ██  ██        ████  ██████████  ██      ██  ██          ██    ██  ██        ██  ██',
            '██  ██████████████  ██  ██  ██            ██        ██  ████  ██  ████████  ██    ██  ██      ██  ██  ██  ██  ██████  ████  ████████  ██████  ██',
            '██                  ██  ██  ██  ██  ████  ██  ████████    ██  ██            ████      ██████              ██  ██  ██    ██        ██      ██  ██',
            '████  ████████  ██████  ██  ██  ██    ██  ██  ██    ██  ████  ████████  ████████████      ██  ██████████████  ██  ████  ██████████████  ████  ██',
            '██    ████  ██████  ██  ██  ██  ████  ██  ██  ████  ██  ██          ██  ██        ██  ██                      ██                ██  ██  ██    ██',
            '██  ████            ██  ██  ██  ████      ██  ██    ██  ██████  ██  ██  ██  ████  ████████████████  ██████████████████  ██████  ██  ██  ████████',
            '██  ████  ████████████  ██  ██        ██████  ████  ██      ██████  ██  ██  ████                ██████          ██  ██████  ██  ██  ██        ██',
            '██                      ██  ████████████      ██    ██  ██  ██      ██  ██    ██  ██  ████████          ██████              ██  ██  ████████  ██',
            '██████████████████████████  ██        ██  ████████  ██  ██  ██  ██  ██  ████████  ██████  ████████████████  ██████████████████  ██      ████  ██',
            '██      ██                  ██  ████  ██  ██        ██████  ██  ██  ██  ██  ██    ██                ██                          ██  ██    ██  ██',
            '██  ██  ██  ██████████████████  ████████  ██████  ████  ██  ██  ██████  ██  ██  ████  ████████  ████████  ██  ████████  ██████████  ██  ████  ██',
            '██  ██  ██  ██  ██                                  ██  ██  ██████  ██      ██  ██          ██      ██    ██    ██  ██████  ██      ████████  ██',
            '██  ██  ██  ██  ██  ██  ████  ██  ██████████████  ████              ██████  ██  ████  ████  ██████      ██████████              ██████        ██',
            '██  ██  ██  ██  ██  ██    ██  ██  ██                    ████  ████  ██  ██  ██    ██    ██      ██████████      ██████████████      ████  ██  ██',
            '██  ██  ██  ██      ██  ████  ██  ██  ████████████████████    ██        ██  ████  ████████████          ██  ██  ██          ██████    ██  ██  ██',
            '██  ██  ██  ██████████  ████████  ██  ██    ██      ████    ████  ████████    ██    ██  ██      ██████      ██  ██████████    ████  ████  ██  ██',
            '██  ██  ██  ██          ██        ██  ██  ████████  ██████████      ██      ████  ████  ██████████  ██████  ██              ████    ██    ██  ██',
            '██  ██      ██  ██████████  ████████  ██                ██      ██  ██████  ██    ██                    ██████████████████  ██    ██████  ██  ██',
            '██  ██  ██  ██              ██    ██  ██  ████  ██  ██  ██  ██████    ████  ██  ██████████████████████      ████  ████          ████  ██  ██  ██',
            '██  ██  ██  ██  ██  ██  ████████  ██  ██            ██  ██    ██████    ██  ██                      ██████  ██          ██  ██████        ██  ██',
            '██  ██  ██  ██  ██  ██        ██      ████████████████  ██  ████  ████  ██  ██████████████████████      ██  ████  ████████████  ████████  ██  ██',
            '██  ██  ██  ██  ██  ████  ██  ██  ██                ██  ██  ██      ██  ██                      ██████  ██    ██  ██                      ██  ██',
            '██  ██  ██  ██  ██  ████  ██  ██  ████████████  ██  ██  ████████  ████  ██  ██████  ██████  ██    ██    ██  ████  ██  ██  ██  ██████  ██████  ██',
            '██  ██  ██  ██  ██  ██    ██                    ██  ██                  ██      ██  ██  ██████████████  ██  ██    ██  ██████████  ██████  ██  ██',
            '██  ██  ██  ██████  ████████████████████████  ████  ██████  ████  ██  ████  ██  ██  ██                  ██  ████  ██  ██                      ██',
            '██  ██  ██                                          ██  ██████    ██    ██  ██  ██  ██  ██████████████████        ██  ██  ██  ██████████████  ██',
            '██  ████████████  ██████████████████  ████████████████          ██████  ██████  ██  ██  ██    ██            ████████  ██  ██████          ██  ██',
            '██            ██████          ██                        ██████████  ██████  ██  ██  ██  ██  ████  ████████  ██        ██  ██  ██  ██  ██  ██  ██',
            '████████████          ██████      ████████████████████████      ██  ██          ██  ██  ██  ██    ██    ████████████  ██  ██  ██  ██  ██  ██  ██',
            '██        ██████████████  ██████████                        ██          ██████████  ██  ██  ██  ██████                ██  ██      ██  ██  ██  ██',
            '██  ████  ██                          ██  ██████████  ██████████  ████  ██  ████    ██  ██  ██      ████████████  ██████  ██  ██████████  ██  ██',
            '██  ██    ██  ██  ██  ████  ████  ██████  ██      ████████  ██████████████  ████  ████  ██  ██████            ██  ██      ██  ██          ██  ██',
            '██  ████                ██████    ██  ██      ██                ██          ██    ██    ██      ████████  ██  ██  ██  ██████  ██  ██  ██  ██  ██',
            '██    ██  ██  ████  ██          ████  ████████████████  ██████  ██  ████████████████  ████  ██████    ██  ██  ██  ██  ████    ██  ██████████████',
            '████  ██████        ██████████████                ████████  ██                        ██        ██  ████████  ██  ██    ████  ██  ██          ██',
            '██    ██      ████████      ██      ██████  ████            ██████████  ██████████████████  ██  ██            ██  ████  ████  ██  ██          ██',
            '██  ████  ██      ████  ██  ██  ██  ██  ██    ████████████          ██        ██            ██  ██  ████████████    ██    ██  ██  ██          ██',
            '██  ████  ██  ██  ████  ██████  ██████  ████████  ██        ██████  ████████████  ████████  ██  ██  ██  ██  ██████  ████████  ██  ██          ██',
            '██        ██                    ██                    ████  ██                        ██    ██          ██                    ██              ██',
            '████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████'
]


class Player_Hero():
    def __init__(self, x, y):
        self.sign = "❖"
        self.x = x
        self.y = y

    def move(self, dx, dy):
        if labirint[self.y + dy][self.x + dx] != WALL_CHAR:
            self.x += dx
            self.y += dy

class Enemy():
    def __init__(self, x, y):
        self.sign = "x"
        self.x = x
        self.y = y

    def move(self, dS):
        moves = [(0, 1), (0, -1), (1, 0), (-1, 0),
                 (1, 1), (1, -1), (-1, 1), (-1, -1)]
        dx, dy = random.choice(moves)
        if labirint[self.y + dy][self.x + dx] != WALL_CHAR:
            self.x += dx
            self.y += dy


player = Player_Hero(2, 1)
en1 = Enemy(132, 48)
en2 = Enemy(38, 3)
en3 = Enemy(8, 27)
en4 = Enemy(4, 46)
en5 = Enemy(65, 31)
en6 = Enemy(98, 10)
en7 = Enemy(64, 8)
en8 = Enemy(136, 3)
en9 = Enemy(85, 23)
en10 = Enemy(100, 43)



def print_level_with_player():
    for y, row in enumerate(labirint):
        for x, char in enumerate(row):
            if x == player.x and y == player.y:
                print("❖", end="")
            elif x == en1.x and y == en1.y:
                print("x", end="")
            elif x == en2.x and y == en2.y:
                print("z", end="")
            elif x == en3.x and y == en3.y:
                print("y", end="")
            elif x == en4.x and y == en4.y:
                print("k", end="")
            elif x == en5.x and y == en5.y:
                print("o", end="")
            elif x == en6.x and y == en6.y:
                print("p", end="")
            elif x == en7.x and y == en7.y:
                print("m", end="")
            elif x == en8.x and y == en8.y:
                print("s", end="")
            elif x == en9.x and y == en9.y:
                print("f", end="")
            elif x == en10.x and y == en10.y:
                print("r", end="")
            else:
                print(char, end="")
        print()


while True:
    dS = random.randint(0, 7)

    os.system('CLS')
    print_level_with_player()

    move = input('Куда идём?')

    if move == 'w':
        player.move(0, -1)
        en1.move(dS)
        en2.move(dS)
        en3.move(dS)
        en4.move(dS)
        en5.move(dS)
        en6.move(dS)
        en7.move(dS)
        en8.move(dS)
        en9.move(dS)
        en10.move(dS)
    elif move == 'a':
        player.move(-1, 0)
        en1.move(dS)
        en2.move(dS)
        en3.move(dS)
        en4.move(dS)
        en5.move(dS)
        en6.move(dS)
        en7.move(dS)
        en8.move(dS)
        en9.move(dS)
        en10.move(dS)
    elif move == 's':
        player.move(0, 1)
        en1.move(dS)
        en2.move(dS)
        en3.move(dS)
        en4.move(dS)
        en5.move(dS)
        en6.move(dS)
        en7.move(dS)
        en8.move(dS)
        en9.move(dS)
        en10.move(dS)
    elif move == 'd':
        player.move(1, 0)
        en1.move(dS)
        en2.move(dS)
        en3.move(dS)
        en4.move(dS)
        en5.move(dS)
        en6.move(dS)
        en7.move(dS)
        en8.move(dS)
        en9.move(dS)
        en10.move(dS)




